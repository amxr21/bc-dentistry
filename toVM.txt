---------------------------------------------------------------React code---------------------------------------------------------------
import { useEffect, useRef, useState } from "react";
import { RenderingEngine, Enums, init as coreInit } from "@cornerstonejs/core";
import { init as dicomImageLoaderInit } from "@cornerstonejs/dicom-image-loader";



const Dicom = () => {
    const content = useRef(null); // Ref to the div container
    const [initialized, setInitialized] = useState(false);

    useEffect(() => {
        const initialize = async () => {
            await coreInit(); // Initialize cornerstone core
            await dicomImageLoaderInit(); // Initialize the DICOM loader
            setInitialized(true);
        };
        initialize();
    }, []);

    useEffect(() => {
        if (initialized && content.current) {
            const renderEngineId = "myRenderingEngine";
            const renderingEngine = new RenderingEngine(renderEngineId);

            const viewportId = "CT_AXIAL_STACK";

            const viewportInput = {
                viewportId,
                element: content.current, // Pass the DOM node
                type: Enums.ViewportType.STACK,
            };

            renderingEngine.enableElement(viewportInput);

            // const imageId = `wadouri:https://github.com/dangom/sample-dicom/raw/master/MR000000.dcm`;
            const imageId = `wadouri:${window.location.origin}/0002.DCM`;


            const viewport = renderingEngine.getViewport(viewportId);

            (async () => {
                try {
                    await viewport.setStack([imageId], 0);
                    viewport.render();
                } catch (error) {
                    console.error("Error loading the DICOM image:", error);
                }
            })();
        }
    }, [initialized]);

    return (
        <div>
            <h2>DICOM Viewer</h2>
            <div
                ref={content} // Attach the ref here
                style={{
                    width: "500px",
                    height: "500px",
                    backgroundColor: "black",
                }}
            ></div>
        </div>
    );
};

export default Dicom;




-------------------------------------------------------------end of React code------------------------------------------------------------


-------------------------------------------------------------eslin------------------------------------------------------------
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
    
  },
]

-------------------------------------------------------------eslin------------------------------------------------------------




-------------------------------------------------------------vite.configs------------------------------------------------------------
import { defineConfig } from "vite"
import react from "@vitejs/plugin-react"
import { viteCommonjs } from "@originjs/vite-plugin-commonjs"

/**
 * Vite configuration for the application.
 *
 * @remarks
 * This configuration is mostly standard Vite + React setup, with specific accommodations for:
 * - WASM decoders used by Cornerstone libraries
 * - DICOM parser which currently uses CommonJS format (planned migration to ESM)
 *
 * @description
 * Key configuration points:
 * - Uses vite-plugin-commonjs to handle the DICOM parser's CommonJS format
 * - Configures worker format as ES modules
 * - Excludes Cornerstone CODEC packages from dependency optimization to handle WASM properly
 * - Explicitly includes dicom-parser in optimization
 * - Ensures WASM files are properly handled as assets
 *
 * @example
 * To use additional WASM decoders, add them to the optimizeDeps.exclude array:
 * ```ts
 * optimizeDeps: {
 *   exclude: [
 *     "@cornerstonejs/codec-new-decoder",
 *     // ... existing codecs
 *   ]
 * }
 * ```
 */
export default defineConfig({
  plugins: [
    react(),
    // for dicom-parser
    viteCommonjs(),
  ],
  // seems like only required in dev mode
  optimizeDeps: {
    exclude: ["@cornerstonejs/dicom-image-loader"],
    include: ["dicom-parser"],
  },
  worker: {
    format: "es",
    rollupOptions: {
      external: ["@icr/polyseg-wasm"],
    },
  },
})


-------------------------------------------------------------vite.configs------------------------------------------------------------



-------------------------------------------------------------json------------------------------------------------------------


{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@cornerstonejs/core": "^2.2.12",
    "@cornerstonejs/dicom-image-loader": "^2.2.12",
    "@cornerstonejs/nifti-volume-loader": "^2.2.12",
    "@cornerstonejs/tools": "^2.2.12",
    "@originjs/vite-plugin-commonjs": "^1.0.3",
    "dicomweb-client": "^0.10.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "eslint": "^9.13.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.11.0",
    "vite": "^5.4.10"
  }
}

-------------------------------------------------------------json------------------------------------------------------------
